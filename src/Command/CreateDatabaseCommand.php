<?phpnamespace Hakam\MultiTenancyBundle\Command;use Doctrine\Persistence\ManagerRegistry;use Exception;use Hakam\MultiTenancyBundle\Enum\DatabaseStatusEnum;use Hakam\MultiTenancyBundle\Exception\MultiTenancyException;use Hakam\MultiTenancyBundle\Services\DbService;use Hakam\MultiTenancyBundle\Services\TenantDbConfigurationInterface;use Psr\EventDispatcher\EventDispatcherInterface;use Symfony\Component\Console\Application;use Symfony\Component\Console\Attribute\AsCommand;use Symfony\Component\Console\Command\Command;use Symfony\Component\Console\Exception\ExceptionInterface;use Symfony\Component\Console\Input\ArrayInput;use Symfony\Component\Console\Input\InputInterface;use Symfony\Component\Console\Output\OutputInterface;use Symfony\Component\DependencyInjection\ContainerInterface;#[AsCommand(    name: 'tenant:database:create',    description: 'Proxy to create a new tenant database.',)]final class CreateDatabaseCommand extends Command{    use CommandTrait;    public function __construct(        private readonly Application              $application,        private readonly ManagerRegistry          $registry,        private readonly ContainerInterface       $container,        private readonly EventDispatcherInterface $eventDispatcher,        private readonly DbService                $dbService)    {        parent::__construct();    }    protected function configure(): void    {        $this            ->setDescription('Create and prepare  new databases for a tenant')            ->setAliases(['t:d:c'])            ->setHelp('This command allows you to create the  new database for a tenant which is added to the main database config entity');    }    protected function execute(InputInterface $input, OutputInterface $output): int    {        try {            $listOfNewDbs = $this->dbService->getListOfNotCreatedDataBases();            /** @var TenantDbConfigurationInterface $newDb */            foreach ($listOfNewDbs as $newDb) {                $this->createAndPrepareDatabase($newDb, $output);                $newDb->setDatabaseStatus(DatabaseStatusEnum::DATABASE_CREATED);                $this->registry->getManager()->persist($newDb);            }            $this->registry->getManager()->flush();            $output->writeln('The new List of Databases created successfully');            return 0;        } catch (Exception $e) {            $output->writeln($e->getMessage());            return 1;        } catch (ExceptionInterface $e) {            $output->writeln($e->getMessage());            return 1;        }    }    /**     * @throws ExceptionInterface     * @throws MultiTenancyException     * @throws \Doctrine\DBAL\Exception     */    private function createAndPrepareDatabase(TenantDbConfigurationInterface $dbConfiguration, OutputInterface $output): void    {        $this->dbService->createDatabase($dbConfiguration);        $command = new MigrateCommand($this->registry, $this->container, $this->eventDispatcher);        $arguments = [            'dbId' => $dbConfiguration->getId(),        ];        $greetInput = new ArrayInput($arguments);        $greetInput->setInteractive(false);        $command->run($greetInput, $output);    }}